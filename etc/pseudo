#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

void execute_command(char **args, char **envp) {
    if (!args[0]) return;

    // 1. Vérifier si c'est un built-in
    if (is_builtin(args[0])) {
        execute_builtin(args);
        return;
    }

    // 2. Chercher dans PATH
    char *path_env = getenv("PATH");
    char *full_path = find_executable_in_path(args[0], path_env);

    if (!full_path) {
        printf("minishell: %s: command not found\n", args[0]);
        return;
    }

    // 3. Exécuter avec fork/execve
    pid_t pid = fork();
    if (pid == 0) {
        execve(full_path, args, envp);
        perror("execve");
        exit(1);
    } else if (pid > 0) {
        waitpid(pid, &status, 0);
    } else {
        perror("fork");
    }

    free(full_path);
}